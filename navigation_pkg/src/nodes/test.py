#!/usr/bin/env python3
import centAct
import numpy as np


#############################################################################
#############################################################################
#############################################################################

# input_a = float(input("Posizione di partenza in float: "))
# input_b = float(input("Posizione finale in float: "))

Nodes_qt = np.array([ #contiene le coordinate cartesiane
        [9.0, 9.0, 0.7,0.7], #0
        [9.0, 5.0, 0.7,0.7],
        [9.0, 1.0, 0.7,0.7],
        [9.0,-5.0, 0.7,0.7],
        [9.0,-8.0, 0.7,0.7],
        [9.0,-11.0, 0.7,0.7], #5 hub
        [5.0, 9.0, 0.7,0.7],
        [5.0, 5.0, 0.7,0.7],
        [5.0, 1.0, 0.7,0.7],
        [5.0,-5.0, 0.7,0.7],
        [5.0,-8.0, 0.7,0.7],
        [5.0,-11.0, 0.7,0.7], #11 hub   ###vanno aggiunti i quaternioni di qw e qz
        [1.0, 9.0, 0.7,0.7],
        [1.0, 5.0, 0.7,0.7],
        [1.0, 1.0, 0.7,0.7],
        [1.0,-5.0, 0.7,0.7],
        [1.0,-8.0, 0.7,0.7],
        [0.7,-11.0, 0.7,0.7], #17 hub
        [-1.0, 12.0, 0.7,0.7], #18 hub
        [-1.0, 9.0, 0.7,0.7],
        [-1.0, 5.0, 0.7,0.7],
        [-1.0, 1.0, 0.7,0.7],
        [-1.0,-5.0, 0.7,0.7],
        [-1.0,-8.0, 0.7,0.7],
        [-5.0, 12.0, 0.7,0.7], #24 hub
        [-5.0, 9.0, 0.7,0.7],
        [-5.0, 5.0, 0.7,0.7],
        [-5.0, 1.0, 0.7,0.7],
        [-5.0,-5.0, 0.7,0.7],
        [-5.0,-8.0, 0.7,0.7],
        [-9.0, 12.0, 0.7,0.7], #30 hub
        [-9.0, 9.0, 0.7,0.7],
        [-9.0, 5.0, 0.7,0.7],
        [-9.0, 1.0, 0.7,0.7],
        [-9.0,-5.0, 0.7,0.7],
        [-9.0,-8.0, 0.7,0.7], #35
        ])


# res = input_a - input_b

# if ( (input_b - input_a) < 0.5 and (input_b - input_a) > -0.5):
#     print (str(res) +" il risultato è compreso all'interno degli estremi")

#############################################################################

a = np.array([[3.5, 5.0, 0.7, 0.9],
              [4.4, 6.2, 0,13, 0.12]
              ])
index = [0,1]
#tb3_0_goal.target_pose.pose.position.x = self.Nodes_qt[nextNode[0]][0]
print("La matrice A è :" + str(Nodes_qt))
print("Presenta alla prima riga il vettore:\n "+ str(Nodes_qt[index[0]]))
print( "Di cui il primo elemento è: " +str(Nodes_qt[index[0]][0]))
print( "Di cui il primo elemento è: " +str(Nodes_qt[index[0]][1]))
print( "Di cui il primo elemento è: " +str(Nodes_qt[index[0]][2]))
print( "Di cui il primo elemento è: " +str(Nodes_qt[index[0]][3]))

#############################################################################
#############################################################################
#############################################################################

# tb3_0_goal_list=[[9.0,-11.0, 0.7]]
# tb3_1_goal_list=[[5.0,-11.0, 0.7]]
#         #self.goalList=[[[9.0,-11.0],[5.0,-11.0]]]
# Lambda = 50 # concentration of pheromones carried by each AGV
# Q_Lambda = 5 # threshold of congestion
# T_s = 0.25 # sample time in [s] of the algorithm
# D_tol = 0.21 # tolerance distance in [m]
# N_nodes = 36

# Nodes = np.array([ #contiene le coordinate cartesiane
#         [9.0, 9.0], #0
#         [9.0, 5.0],
#         [9.0, 1.0],
#         [9.0,-5.0],
#         [9.0,-8.0],
#         [9.0,-11.0], #5 hub
#         [5.0, 9.0],
#         [5.0, 5.0],
#         [5.0, 1.0],
#         [5.0,-5.0],
#         [5.0,-8.0],
#         [5.0,-11.0], #11 hub   ###vanno aggiunti i quaternioni di qw e qz
#         [1.0, 9.0],
#         [1.0, 5.0],
#         [1.0, 1.0],
#         [1.0,-5.0],
#         [1.0,-8.0],
#         [0.7,-11.0], #17 hub
#         [-1.0, 12.0], #18 hub
#         [-1.0, 9.0],
#         [-1.0, 5.0],
#         [-1.0, 1.0],
#         [-1.0,-5.0],
#         [-1.0,-8.0],
#         [-5.0, 12.0], #24 hub
#         [-5.0, 9.0],
#         [-5.0, 5.0],
#         [-5.0, 1.0],
#         [-5.0,-5.0],
#         [-5.0,-8.0],
#         [-9.0, 12.0], #30 hub
#         [-9.0, 9.0],
#         [-9.0, 5.0],
#         [-9.0, 1.0],
#         [-9.0,-5.0],
#         [-9.0,-8.0], #35
#         ])

# A_env = np.array([
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
#         [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #0
#         [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #1
#         [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #2
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
#         [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #3
#         [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #4
#         [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #5
#         ############################################################################################################
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #6
#         [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #7
#         [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #8
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
#         [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #9
#         [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #10 
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #11
#         ############################################################################################################
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #12
#         [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #13
#         [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #14
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #15
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #16
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #17
#         ############################################################################################################
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #18
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #19
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], #20
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], #21
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], #22
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #23
#         ############################################################################################################
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #24
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], #25
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], #26
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], #27
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], #28
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #29
#         ############################################################################################################
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], #30
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], #31
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], #32
#         #0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0], #33
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], #34
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], #35

#     ])


# K = 2 # numero di robot della flotta 

# task = np.array([ 
#         [17], 
#         [18], 
#         ])
#         # Inizializzazione di task come 
#         # vettore di dimensioni 1xK (vettore riga).
# Pos_corr1 = np.array([ 
#         [-1.0, 1.0],
#         [1.0, 1.0],
#         ])

# nextNode = np.array([ 
#         [21], # 1 1
#         [13], # 2 1
#         ])

#         #self.goal_list = []

# for i in range(0,10):
#     print("######################### " + str(i)+ " ITERAZIONE ########################################### !! #")
#     nextNode = centAct.nextNode_comp(A_env,Pos_corr1,N_nodes,Nodes,K,D_tol,nextNode,Lambda,task,Q_Lambda)
#     print("\n########################################### IL NEXT NODE è: " + str(nextNode)+ " \n")
#     Pos_corr1[0]= Nodes[nextNode[0]]
#     Pos_corr1[1]= Nodes[nextNode[1]]
#     print("\n########################################### LA POSCOR è: " + str(Pos_corr1)+ " \n")
